name: Multi-arch GCC Build for Doxygen

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        config:
            name: "S390X Release Build",
            arch: s390x,
            distro: ubuntu18.04,
            build_type: "Release",

    steps:
    - uses: actions/checkout@v1

    - uses: uraimo/run-on-arch-action@v2.0.8
      name: Configure and Build
      with:
        arch: ${{ matrix.arch }}
        distro: ${{ matrix.distro }}
        githubToken: ${{ github.token }}
        shell: cmake -P {0}
        install: |
          sudo apt-get update -q -y
          sudo apt-get install -q -y texlive texlive-latex-recommended texlive-extra-utils texlive-latex-extra texlive-font-utils libxapian-dev ghostscript libxml2-utils graphviz qt5-default
        env: |
          CC: gcc
          CXX: g++
          CTEST_OUTPUT_ON_FAILURE: ON
        run: |
          uname -m
          execute_process(
            COMMAND cmake
              -S .
              -B build
              -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
              -G "Unix Makefiles"
              -Dbuild_doc=YES
              -Dbuild_wizard=YES
              -Dbuild_search=YES
              -Dbuild_app=YES
              -Dbuild_parse=YES
              -Dbuild_xmlparser=YES
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()
          include(ProcessorCount)
          ProcessorCount(N)
          execute_process(
            COMMAND cmake --build build --parallel ${N}
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE output
            ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
          )
          if (NOT result EQUAL 0)
            string(REGEX MATCH "FAILED:.*$" error_message "${output}")
            string(REPLACE "\n" "%0A" error_message "${error_message}")
            message("::error::${error_message}")
            message(FATAL_ERROR "Build failed")
          endif()
          execute_process(
            COMMAND cmake --build build --target tests TEST_FLAGS="--xml --xmlxsd --xhtml --docbook --rtf"
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Running tests failed!")
          endif()
          execute_process(
            COMMAND cmake --build build --target docs
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Building documentation failed")
          endif()
